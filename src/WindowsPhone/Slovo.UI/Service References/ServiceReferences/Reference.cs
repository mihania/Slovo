//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Slovo.ServiceReferences {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TranslateOptions", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")]
    public partial class TranslateOptions : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CategoryField;
        
        private string ContentTypeField;
        
        private string ReservedFlagsField;
        
        private string StateField;
        
        private string UriField;
        
        private string UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ContentType {
            get {
                return this.ContentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentTypeField, value) != true)) {
                    this.ContentTypeField = value;
                    this.RaisePropertyChanged("ContentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string ReservedFlags {
            get {
                return this.ReservedFlagsField;
            }
            set {
                if ((object.ReferenceEquals(this.ReservedFlagsField, value) != true)) {
                    this.ReservedFlagsField = value;
                    this.RaisePropertyChanged("ReservedFlags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Uri {
            get {
                return this.UriField;
            }
            set {
                if ((object.ReferenceEquals(this.UriField, value) != true)) {
                    this.UriField = value;
                    this.RaisePropertyChanged("Uri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetTranslationsResponse", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")]
    public partial class GetTranslationsResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FromField;
        
        private string StateField;
        
        private Slovo.ServiceReferences.TranslationMatch[] TranslationsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string From {
            get {
                return this.FromField;
            }
            set {
                if ((object.ReferenceEquals(this.FromField, value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public Slovo.ServiceReferences.TranslationMatch[] Translations {
            get {
                return this.TranslationsField;
            }
            set {
                if ((object.ReferenceEquals(this.TranslationsField, value) != true)) {
                    this.TranslationsField = value;
                    this.RaisePropertyChanged("Translations");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TranslationMatch", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")]
    public partial class TranslationMatch : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CountField;
        
        private string ErrorField;
        
        private int MatchDegreeField;
        
        private string MatchedOriginalTextField;
        
        private int RatingField;
        
        private string TranslatedTextField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int MatchDegree {
            get {
                return this.MatchDegreeField;
            }
            set {
                if ((this.MatchDegreeField.Equals(value) != true)) {
                    this.MatchDegreeField = value;
                    this.RaisePropertyChanged("MatchDegree");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string MatchedOriginalText {
            get {
                return this.MatchedOriginalTextField;
            }
            set {
                if ((object.ReferenceEquals(this.MatchedOriginalTextField, value) != true)) {
                    this.MatchedOriginalTextField = value;
                    this.RaisePropertyChanged("MatchedOriginalText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TranslatedText {
            get {
                return this.TranslatedTextField;
            }
            set {
                if ((object.ReferenceEquals(this.TranslatedTextField, value) != true)) {
                    this.TranslatedTextField = value;
                    this.RaisePropertyChanged("TranslatedText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Translation", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")]
    public partial class Translation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string OriginalTextField;
        
        private int RatingField;
        
        private int SequenceField;
        
        private string TranslatedTextField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string OriginalText {
            get {
                return this.OriginalTextField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalTextField, value) != true)) {
                    this.OriginalTextField = value;
                    this.RaisePropertyChanged("OriginalText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int Sequence {
            get {
                return this.SequenceField;
            }
            set {
                if ((this.SequenceField.Equals(value) != true)) {
                    this.SequenceField = value;
                    this.RaisePropertyChanged("Sequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TranslatedText {
            get {
                return this.TranslatedTextField;
            }
            set {
                if ((object.ReferenceEquals(this.TranslatedTextField, value) != true)) {
                    this.TranslatedTextField = value;
                    this.RaisePropertyChanged("TranslatedText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TranslateArrayResponse", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2")]
    public partial class TranslateArrayResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorField;
        
        private string FromField;
        
        private int[] OriginalTextSentenceLengthsField;
        
        private string StateField;
        
        private string TranslatedTextField;
        
        private int[] TranslatedTextSentenceLengthsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string From {
            get {
                return this.FromField;
            }
            set {
                if ((object.ReferenceEquals(this.FromField, value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int[] OriginalTextSentenceLengths {
            get {
                return this.OriginalTextSentenceLengthsField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalTextSentenceLengthsField, value) != true)) {
                    this.OriginalTextSentenceLengthsField = value;
                    this.RaisePropertyChanged("OriginalTextSentenceLengths");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string TranslatedText {
            get {
                return this.TranslatedTextField;
            }
            set {
                if ((object.ReferenceEquals(this.TranslatedTextField, value) != true)) {
                    this.TranslatedTextField = value;
                    this.RaisePropertyChanged("TranslatedText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int[] TranslatedTextSentenceLengths {
            get {
                return this.TranslatedTextSentenceLengthsField;
            }
            set {
                if ((object.ReferenceEquals(this.TranslatedTextSentenceLengthsField, value) != true)) {
                    this.TranslatedTextSentenceLengthsField = value;
                    this.RaisePropertyChanged("TranslatedTextSentenceLengths");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://api.microsofttranslator.com/V2", ConfigurationName="ServiceReferences.LanguageService")]
    public interface LanguageService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/AddTranslation", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/AddTranslationResponse")]
        System.IAsyncResult BeginAddTranslation(string appId, string originalText, string translatedText, string from, string to, int rating, string contentType, string category, string user, string uri, System.AsyncCallback callback, object asyncState);
        
        void EndAddTranslation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/BreakSentences", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/BreakSentencesResponse")]
        System.IAsyncResult BeginBreakSentences(string appId, string text, string language, System.AsyncCallback callback, object asyncState);
        
        int[] EndBreakSentences(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/Detect", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/DetectResponse")]
        System.IAsyncResult BeginDetect(string appId, string text, System.AsyncCallback callback, object asyncState);
        
        string EndDetect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/DetectArray", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/DetectArrayResponse")]
        System.IAsyncResult BeginDetectArray(string appId, string[] texts, System.AsyncCallback callback, object asyncState);
        
        string[] EndDetectArray(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/GetAppIdToken", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/GetAppIdTokenResponse")]
        System.IAsyncResult BeginGetAppIdToken(string appId, int minRatingRead, int maxRatingWrite, int expireSeconds, System.AsyncCallback callback, object asyncState);
        
        string EndGetAppIdToken(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/GetLanguageNames", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/GetLanguageNamesResponse")]
        System.IAsyncResult BeginGetLanguageNames(string appId, string locale, string[] languageCodes, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetLanguageNames(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/GetLanguagesForSpeak", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/GetLanguagesForSpeakRespons" +
            "e")]
        System.IAsyncResult BeginGetLanguagesForSpeak(string appId, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetLanguagesForSpeak(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/GetLanguagesForTranslate", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/GetLanguagesForTranslateRes" +
            "ponse")]
        System.IAsyncResult BeginGetLanguagesForTranslate(string appId, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetLanguagesForTranslate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/GetTranslations", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/GetTranslationsResponse")]
        System.IAsyncResult BeginGetTranslations(string appId, string text, string from, string to, int maxTranslations, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState);
        
        Slovo.ServiceReferences.GetTranslationsResponse EndGetTranslations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/Translate", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/TranslateResponse")]
        System.IAsyncResult BeginTranslate(string appId, string text, string from, string to, string contentType, string category, System.AsyncCallback callback, object asyncState);
        
        string EndTranslate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/AddTranslationArray", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/AddTranslationArrayResponse" +
            "")]
        System.IAsyncResult BeginAddTranslationArray(string appId, Slovo.ServiceReferences.Translation[] translations, string from, string to, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState);
        
        void EndAddTranslationArray(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/GetTranslationsArray", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/GetTranslationsArrayRespons" +
            "e")]
        System.IAsyncResult BeginGetTranslationsArray(string appId, string[] texts, string from, string to, int maxTranslations, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState);
        
        Slovo.ServiceReferences.GetTranslationsResponse[] EndGetTranslationsArray(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/Speak", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/SpeakResponse")]
        System.IAsyncResult BeginSpeak(string appId, string text, string language, string format, string options, System.AsyncCallback callback, object asyncState);
        
        string EndSpeak(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://api.microsofttranslator.com/V2/LanguageService/TranslateArray", ReplyAction="http://api.microsofttranslator.com/V2/LanguageService/TranslateArrayResponse")]
        System.IAsyncResult BeginTranslateArray(string appId, string[] texts, string from, string to, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState);
        
        Slovo.ServiceReferences.TranslateArrayResponse[] EndTranslateArray(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LanguageServiceChannel : Slovo.ServiceReferences.LanguageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BreakSentencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BreakSentencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DetectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DetectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DetectArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DetectArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAppIdTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAppIdTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLanguageNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLanguageNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLanguagesForSpeakCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLanguagesForSpeakCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLanguagesForTranslateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLanguagesForTranslateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTranslationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTranslationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Slovo.ServiceReferences.GetTranslationsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Slovo.ServiceReferences.GetTranslationsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TranslateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TranslateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTranslationsArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTranslationsArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Slovo.ServiceReferences.GetTranslationsResponse[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Slovo.ServiceReferences.GetTranslationsResponse[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SpeakCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SpeakCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TranslateArrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TranslateArrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Slovo.ServiceReferences.TranslateArrayResponse[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Slovo.ServiceReferences.TranslateArrayResponse[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LanguageServiceClient : System.ServiceModel.ClientBase<Slovo.ServiceReferences.LanguageService>, Slovo.ServiceReferences.LanguageService {
        
        private BeginOperationDelegate onBeginAddTranslationDelegate;
        
        private EndOperationDelegate onEndAddTranslationDelegate;
        
        private System.Threading.SendOrPostCallback onAddTranslationCompletedDelegate;
        
        private BeginOperationDelegate onBeginBreakSentencesDelegate;
        
        private EndOperationDelegate onEndBreakSentencesDelegate;
        
        private System.Threading.SendOrPostCallback onBreakSentencesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDetectDelegate;
        
        private EndOperationDelegate onEndDetectDelegate;
        
        private System.Threading.SendOrPostCallback onDetectCompletedDelegate;
        
        private BeginOperationDelegate onBeginDetectArrayDelegate;
        
        private EndOperationDelegate onEndDetectArrayDelegate;
        
        private System.Threading.SendOrPostCallback onDetectArrayCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAppIdTokenDelegate;
        
        private EndOperationDelegate onEndGetAppIdTokenDelegate;
        
        private System.Threading.SendOrPostCallback onGetAppIdTokenCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLanguageNamesDelegate;
        
        private EndOperationDelegate onEndGetLanguageNamesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLanguageNamesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLanguagesForSpeakDelegate;
        
        private EndOperationDelegate onEndGetLanguagesForSpeakDelegate;
        
        private System.Threading.SendOrPostCallback onGetLanguagesForSpeakCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLanguagesForTranslateDelegate;
        
        private EndOperationDelegate onEndGetLanguagesForTranslateDelegate;
        
        private System.Threading.SendOrPostCallback onGetLanguagesForTranslateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTranslationsDelegate;
        
        private EndOperationDelegate onEndGetTranslationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTranslationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTranslateDelegate;
        
        private EndOperationDelegate onEndTranslateDelegate;
        
        private System.Threading.SendOrPostCallback onTranslateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTranslationArrayDelegate;
        
        private EndOperationDelegate onEndAddTranslationArrayDelegate;
        
        private System.Threading.SendOrPostCallback onAddTranslationArrayCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTranslationsArrayDelegate;
        
        private EndOperationDelegate onEndGetTranslationsArrayDelegate;
        
        private System.Threading.SendOrPostCallback onGetTranslationsArrayCompletedDelegate;
        
        private BeginOperationDelegate onBeginSpeakDelegate;
        
        private EndOperationDelegate onEndSpeakDelegate;
        
        private System.Threading.SendOrPostCallback onSpeakCompletedDelegate;
        
        private BeginOperationDelegate onBeginTranslateArrayDelegate;
        
        private EndOperationDelegate onEndTranslateArrayDelegate;
        
        private System.Threading.SendOrPostCallback onTranslateArrayCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LanguageServiceClient() {
        }
        
        public LanguageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LanguageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LanguageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LanguageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddTranslationCompleted;
        
        public event System.EventHandler<BreakSentencesCompletedEventArgs> BreakSentencesCompleted;
        
        public event System.EventHandler<DetectCompletedEventArgs> DetectCompleted;
        
        public event System.EventHandler<DetectArrayCompletedEventArgs> DetectArrayCompleted;
        
        public event System.EventHandler<GetAppIdTokenCompletedEventArgs> GetAppIdTokenCompleted;
        
        public event System.EventHandler<GetLanguageNamesCompletedEventArgs> GetLanguageNamesCompleted;
        
        public event System.EventHandler<GetLanguagesForSpeakCompletedEventArgs> GetLanguagesForSpeakCompleted;
        
        public event System.EventHandler<GetLanguagesForTranslateCompletedEventArgs> GetLanguagesForTranslateCompleted;
        
        public event System.EventHandler<GetTranslationsCompletedEventArgs> GetTranslationsCompleted;
        
        public event System.EventHandler<TranslateCompletedEventArgs> TranslateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddTranslationArrayCompleted;
        
        public event System.EventHandler<GetTranslationsArrayCompletedEventArgs> GetTranslationsArrayCompleted;
        
        public event System.EventHandler<SpeakCompletedEventArgs> SpeakCompleted;
        
        public event System.EventHandler<TranslateArrayCompletedEventArgs> TranslateArrayCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginAddTranslation(string appId, string originalText, string translatedText, string from, string to, int rating, string contentType, string category, string user, string uri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTranslation(appId, originalText, translatedText, from, to, rating, contentType, category, user, uri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Slovo.ServiceReferences.LanguageService.EndAddTranslation(System.IAsyncResult result) {
            base.Channel.EndAddTranslation(result);
        }
        
        private System.IAsyncResult OnBeginAddTranslation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            string originalText = ((string)(inValues[1]));
            string translatedText = ((string)(inValues[2]));
            string from = ((string)(inValues[3]));
            string to = ((string)(inValues[4]));
            int rating = ((int)(inValues[5]));
            string contentType = ((string)(inValues[6]));
            string category = ((string)(inValues[7]));
            string user = ((string)(inValues[8]));
            string uri = ((string)(inValues[9]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginAddTranslation(appId, originalText, translatedText, from, to, rating, contentType, category, user, uri, callback, asyncState);
        }
        
        private object[] OnEndAddTranslation(System.IAsyncResult result) {
            ((Slovo.ServiceReferences.LanguageService)(this)).EndAddTranslation(result);
            return null;
        }
        
        private void OnAddTranslationCompleted(object state) {
            if ((this.AddTranslationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTranslationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTranslationAsync(string appId, string originalText, string translatedText, string from, string to, int rating, string contentType, string category, string user, string uri) {
            this.AddTranslationAsync(appId, originalText, translatedText, from, to, rating, contentType, category, user, uri, null);
        }
        
        public void AddTranslationAsync(string appId, string originalText, string translatedText, string from, string to, int rating, string contentType, string category, string user, string uri, object userState) {
            if ((this.onBeginAddTranslationDelegate == null)) {
                this.onBeginAddTranslationDelegate = new BeginOperationDelegate(this.OnBeginAddTranslation);
            }
            if ((this.onEndAddTranslationDelegate == null)) {
                this.onEndAddTranslationDelegate = new EndOperationDelegate(this.OnEndAddTranslation);
            }
            if ((this.onAddTranslationCompletedDelegate == null)) {
                this.onAddTranslationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTranslationCompleted);
            }
            base.InvokeAsync(this.onBeginAddTranslationDelegate, new object[] {
                        appId,
                        originalText,
                        translatedText,
                        from,
                        to,
                        rating,
                        contentType,
                        category,
                        user,
                        uri}, this.onEndAddTranslationDelegate, this.onAddTranslationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginBreakSentences(string appId, string text, string language, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBreakSentences(appId, text, language, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int[] Slovo.ServiceReferences.LanguageService.EndBreakSentences(System.IAsyncResult result) {
            return base.Channel.EndBreakSentences(result);
        }
        
        private System.IAsyncResult OnBeginBreakSentences(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            string text = ((string)(inValues[1]));
            string language = ((string)(inValues[2]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginBreakSentences(appId, text, language, callback, asyncState);
        }
        
        private object[] OnEndBreakSentences(System.IAsyncResult result) {
            int[] retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndBreakSentences(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBreakSentencesCompleted(object state) {
            if ((this.BreakSentencesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BreakSentencesCompleted(this, new BreakSentencesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BreakSentencesAsync(string appId, string text, string language) {
            this.BreakSentencesAsync(appId, text, language, null);
        }
        
        public void BreakSentencesAsync(string appId, string text, string language, object userState) {
            if ((this.onBeginBreakSentencesDelegate == null)) {
                this.onBeginBreakSentencesDelegate = new BeginOperationDelegate(this.OnBeginBreakSentences);
            }
            if ((this.onEndBreakSentencesDelegate == null)) {
                this.onEndBreakSentencesDelegate = new EndOperationDelegate(this.OnEndBreakSentences);
            }
            if ((this.onBreakSentencesCompletedDelegate == null)) {
                this.onBreakSentencesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBreakSentencesCompleted);
            }
            base.InvokeAsync(this.onBeginBreakSentencesDelegate, new object[] {
                        appId,
                        text,
                        language}, this.onEndBreakSentencesDelegate, this.onBreakSentencesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginDetect(string appId, string text, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDetect(appId, text, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Slovo.ServiceReferences.LanguageService.EndDetect(System.IAsyncResult result) {
            return base.Channel.EndDetect(result);
        }
        
        private System.IAsyncResult OnBeginDetect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            string text = ((string)(inValues[1]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginDetect(appId, text, callback, asyncState);
        }
        
        private object[] OnEndDetect(System.IAsyncResult result) {
            string retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndDetect(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDetectCompleted(object state) {
            if ((this.DetectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DetectCompleted(this, new DetectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DetectAsync(string appId, string text) {
            this.DetectAsync(appId, text, null);
        }
        
        public void DetectAsync(string appId, string text, object userState) {
            if ((this.onBeginDetectDelegate == null)) {
                this.onBeginDetectDelegate = new BeginOperationDelegate(this.OnBeginDetect);
            }
            if ((this.onEndDetectDelegate == null)) {
                this.onEndDetectDelegate = new EndOperationDelegate(this.OnEndDetect);
            }
            if ((this.onDetectCompletedDelegate == null)) {
                this.onDetectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDetectCompleted);
            }
            base.InvokeAsync(this.onBeginDetectDelegate, new object[] {
                        appId,
                        text}, this.onEndDetectDelegate, this.onDetectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginDetectArray(string appId, string[] texts, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDetectArray(appId, texts, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string[] Slovo.ServiceReferences.LanguageService.EndDetectArray(System.IAsyncResult result) {
            return base.Channel.EndDetectArray(result);
        }
        
        private System.IAsyncResult OnBeginDetectArray(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            string[] texts = ((string[])(inValues[1]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginDetectArray(appId, texts, callback, asyncState);
        }
        
        private object[] OnEndDetectArray(System.IAsyncResult result) {
            string[] retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndDetectArray(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDetectArrayCompleted(object state) {
            if ((this.DetectArrayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DetectArrayCompleted(this, new DetectArrayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DetectArrayAsync(string appId, string[] texts) {
            this.DetectArrayAsync(appId, texts, null);
        }
        
        public void DetectArrayAsync(string appId, string[] texts, object userState) {
            if ((this.onBeginDetectArrayDelegate == null)) {
                this.onBeginDetectArrayDelegate = new BeginOperationDelegate(this.OnBeginDetectArray);
            }
            if ((this.onEndDetectArrayDelegate == null)) {
                this.onEndDetectArrayDelegate = new EndOperationDelegate(this.OnEndDetectArray);
            }
            if ((this.onDetectArrayCompletedDelegate == null)) {
                this.onDetectArrayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDetectArrayCompleted);
            }
            base.InvokeAsync(this.onBeginDetectArrayDelegate, new object[] {
                        appId,
                        texts}, this.onEndDetectArrayDelegate, this.onDetectArrayCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginGetAppIdToken(string appId, int minRatingRead, int maxRatingWrite, int expireSeconds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAppIdToken(appId, minRatingRead, maxRatingWrite, expireSeconds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Slovo.ServiceReferences.LanguageService.EndGetAppIdToken(System.IAsyncResult result) {
            return base.Channel.EndGetAppIdToken(result);
        }
        
        private System.IAsyncResult OnBeginGetAppIdToken(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            int minRatingRead = ((int)(inValues[1]));
            int maxRatingWrite = ((int)(inValues[2]));
            int expireSeconds = ((int)(inValues[3]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginGetAppIdToken(appId, minRatingRead, maxRatingWrite, expireSeconds, callback, asyncState);
        }
        
        private object[] OnEndGetAppIdToken(System.IAsyncResult result) {
            string retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndGetAppIdToken(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAppIdTokenCompleted(object state) {
            if ((this.GetAppIdTokenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAppIdTokenCompleted(this, new GetAppIdTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAppIdTokenAsync(string appId, int minRatingRead, int maxRatingWrite, int expireSeconds) {
            this.GetAppIdTokenAsync(appId, minRatingRead, maxRatingWrite, expireSeconds, null);
        }
        
        public void GetAppIdTokenAsync(string appId, int minRatingRead, int maxRatingWrite, int expireSeconds, object userState) {
            if ((this.onBeginGetAppIdTokenDelegate == null)) {
                this.onBeginGetAppIdTokenDelegate = new BeginOperationDelegate(this.OnBeginGetAppIdToken);
            }
            if ((this.onEndGetAppIdTokenDelegate == null)) {
                this.onEndGetAppIdTokenDelegate = new EndOperationDelegate(this.OnEndGetAppIdToken);
            }
            if ((this.onGetAppIdTokenCompletedDelegate == null)) {
                this.onGetAppIdTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAppIdTokenCompleted);
            }
            base.InvokeAsync(this.onBeginGetAppIdTokenDelegate, new object[] {
                        appId,
                        minRatingRead,
                        maxRatingWrite,
                        expireSeconds}, this.onEndGetAppIdTokenDelegate, this.onGetAppIdTokenCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginGetLanguageNames(string appId, string locale, string[] languageCodes, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLanguageNames(appId, locale, languageCodes, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string[] Slovo.ServiceReferences.LanguageService.EndGetLanguageNames(System.IAsyncResult result) {
            return base.Channel.EndGetLanguageNames(result);
        }
        
        private System.IAsyncResult OnBeginGetLanguageNames(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            string locale = ((string)(inValues[1]));
            string[] languageCodes = ((string[])(inValues[2]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginGetLanguageNames(appId, locale, languageCodes, callback, asyncState);
        }
        
        private object[] OnEndGetLanguageNames(System.IAsyncResult result) {
            string[] retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndGetLanguageNames(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLanguageNamesCompleted(object state) {
            if ((this.GetLanguageNamesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLanguageNamesCompleted(this, new GetLanguageNamesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLanguageNamesAsync(string appId, string locale, string[] languageCodes) {
            this.GetLanguageNamesAsync(appId, locale, languageCodes, null);
        }
        
        public void GetLanguageNamesAsync(string appId, string locale, string[] languageCodes, object userState) {
            if ((this.onBeginGetLanguageNamesDelegate == null)) {
                this.onBeginGetLanguageNamesDelegate = new BeginOperationDelegate(this.OnBeginGetLanguageNames);
            }
            if ((this.onEndGetLanguageNamesDelegate == null)) {
                this.onEndGetLanguageNamesDelegate = new EndOperationDelegate(this.OnEndGetLanguageNames);
            }
            if ((this.onGetLanguageNamesCompletedDelegate == null)) {
                this.onGetLanguageNamesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLanguageNamesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLanguageNamesDelegate, new object[] {
                        appId,
                        locale,
                        languageCodes}, this.onEndGetLanguageNamesDelegate, this.onGetLanguageNamesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginGetLanguagesForSpeak(string appId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLanguagesForSpeak(appId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string[] Slovo.ServiceReferences.LanguageService.EndGetLanguagesForSpeak(System.IAsyncResult result) {
            return base.Channel.EndGetLanguagesForSpeak(result);
        }
        
        private System.IAsyncResult OnBeginGetLanguagesForSpeak(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginGetLanguagesForSpeak(appId, callback, asyncState);
        }
        
        private object[] OnEndGetLanguagesForSpeak(System.IAsyncResult result) {
            string[] retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndGetLanguagesForSpeak(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLanguagesForSpeakCompleted(object state) {
            if ((this.GetLanguagesForSpeakCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLanguagesForSpeakCompleted(this, new GetLanguagesForSpeakCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLanguagesForSpeakAsync(string appId) {
            this.GetLanguagesForSpeakAsync(appId, null);
        }
        
        public void GetLanguagesForSpeakAsync(string appId, object userState) {
            if ((this.onBeginGetLanguagesForSpeakDelegate == null)) {
                this.onBeginGetLanguagesForSpeakDelegate = new BeginOperationDelegate(this.OnBeginGetLanguagesForSpeak);
            }
            if ((this.onEndGetLanguagesForSpeakDelegate == null)) {
                this.onEndGetLanguagesForSpeakDelegate = new EndOperationDelegate(this.OnEndGetLanguagesForSpeak);
            }
            if ((this.onGetLanguagesForSpeakCompletedDelegate == null)) {
                this.onGetLanguagesForSpeakCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLanguagesForSpeakCompleted);
            }
            base.InvokeAsync(this.onBeginGetLanguagesForSpeakDelegate, new object[] {
                        appId}, this.onEndGetLanguagesForSpeakDelegate, this.onGetLanguagesForSpeakCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginGetLanguagesForTranslate(string appId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLanguagesForTranslate(appId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string[] Slovo.ServiceReferences.LanguageService.EndGetLanguagesForTranslate(System.IAsyncResult result) {
            return base.Channel.EndGetLanguagesForTranslate(result);
        }
        
        private System.IAsyncResult OnBeginGetLanguagesForTranslate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginGetLanguagesForTranslate(appId, callback, asyncState);
        }
        
        private object[] OnEndGetLanguagesForTranslate(System.IAsyncResult result) {
            string[] retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndGetLanguagesForTranslate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLanguagesForTranslateCompleted(object state) {
            if ((this.GetLanguagesForTranslateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLanguagesForTranslateCompleted(this, new GetLanguagesForTranslateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLanguagesForTranslateAsync(string appId) {
            this.GetLanguagesForTranslateAsync(appId, null);
        }
        
        public void GetLanguagesForTranslateAsync(string appId, object userState) {
            if ((this.onBeginGetLanguagesForTranslateDelegate == null)) {
                this.onBeginGetLanguagesForTranslateDelegate = new BeginOperationDelegate(this.OnBeginGetLanguagesForTranslate);
            }
            if ((this.onEndGetLanguagesForTranslateDelegate == null)) {
                this.onEndGetLanguagesForTranslateDelegate = new EndOperationDelegate(this.OnEndGetLanguagesForTranslate);
            }
            if ((this.onGetLanguagesForTranslateCompletedDelegate == null)) {
                this.onGetLanguagesForTranslateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLanguagesForTranslateCompleted);
            }
            base.InvokeAsync(this.onBeginGetLanguagesForTranslateDelegate, new object[] {
                        appId}, this.onEndGetLanguagesForTranslateDelegate, this.onGetLanguagesForTranslateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginGetTranslations(string appId, string text, string from, string to, int maxTranslations, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTranslations(appId, text, from, to, maxTranslations, options, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Slovo.ServiceReferences.GetTranslationsResponse Slovo.ServiceReferences.LanguageService.EndGetTranslations(System.IAsyncResult result) {
            return base.Channel.EndGetTranslations(result);
        }
        
        private System.IAsyncResult OnBeginGetTranslations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            string text = ((string)(inValues[1]));
            string from = ((string)(inValues[2]));
            string to = ((string)(inValues[3]));
            int maxTranslations = ((int)(inValues[4]));
            Slovo.ServiceReferences.TranslateOptions options = ((Slovo.ServiceReferences.TranslateOptions)(inValues[5]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginGetTranslations(appId, text, from, to, maxTranslations, options, callback, asyncState);
        }
        
        private object[] OnEndGetTranslations(System.IAsyncResult result) {
            Slovo.ServiceReferences.GetTranslationsResponse retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndGetTranslations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTranslationsCompleted(object state) {
            if ((this.GetTranslationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTranslationsCompleted(this, new GetTranslationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTranslationsAsync(string appId, string text, string from, string to, int maxTranslations, Slovo.ServiceReferences.TranslateOptions options) {
            this.GetTranslationsAsync(appId, text, from, to, maxTranslations, options, null);
        }
        
        public void GetTranslationsAsync(string appId, string text, string from, string to, int maxTranslations, Slovo.ServiceReferences.TranslateOptions options, object userState) {
            if ((this.onBeginGetTranslationsDelegate == null)) {
                this.onBeginGetTranslationsDelegate = new BeginOperationDelegate(this.OnBeginGetTranslations);
            }
            if ((this.onEndGetTranslationsDelegate == null)) {
                this.onEndGetTranslationsDelegate = new EndOperationDelegate(this.OnEndGetTranslations);
            }
            if ((this.onGetTranslationsCompletedDelegate == null)) {
                this.onGetTranslationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTranslationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTranslationsDelegate, new object[] {
                        appId,
                        text,
                        from,
                        to,
                        maxTranslations,
                        options}, this.onEndGetTranslationsDelegate, this.onGetTranslationsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginTranslate(string appId, string text, string from, string to, string contentType, string category, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTranslate(appId, text, from, to, contentType, category, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Slovo.ServiceReferences.LanguageService.EndTranslate(System.IAsyncResult result) {
            return base.Channel.EndTranslate(result);
        }
        
        private System.IAsyncResult OnBeginTranslate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            string text = ((string)(inValues[1]));
            string from = ((string)(inValues[2]));
            string to = ((string)(inValues[3]));
            string contentType = ((string)(inValues[4]));
            string category = ((string)(inValues[5]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginTranslate(appId, text, from, to, contentType, category, callback, asyncState);
        }
        
        private object[] OnEndTranslate(System.IAsyncResult result) {
            string retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndTranslate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTranslateCompleted(object state) {
            if ((this.TranslateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TranslateCompleted(this, new TranslateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TranslateAsync(string appId, string text, string from, string to, string contentType, string category) {
            this.TranslateAsync(appId, text, from, to, contentType, category, null);
        }
        
        public void TranslateAsync(string appId, string text, string from, string to, string contentType, string category, object userState) {
            if ((this.onBeginTranslateDelegate == null)) {
                this.onBeginTranslateDelegate = new BeginOperationDelegate(this.OnBeginTranslate);
            }
            if ((this.onEndTranslateDelegate == null)) {
                this.onEndTranslateDelegate = new EndOperationDelegate(this.OnEndTranslate);
            }
            if ((this.onTranslateCompletedDelegate == null)) {
                this.onTranslateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTranslateCompleted);
            }
            base.InvokeAsync(this.onBeginTranslateDelegate, new object[] {
                        appId,
                        text,
                        from,
                        to,
                        contentType,
                        category}, this.onEndTranslateDelegate, this.onTranslateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginAddTranslationArray(string appId, Slovo.ServiceReferences.Translation[] translations, string from, string to, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTranslationArray(appId, translations, from, to, options, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Slovo.ServiceReferences.LanguageService.EndAddTranslationArray(System.IAsyncResult result) {
            base.Channel.EndAddTranslationArray(result);
        }
        
        private System.IAsyncResult OnBeginAddTranslationArray(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            Slovo.ServiceReferences.Translation[] translations = ((Slovo.ServiceReferences.Translation[])(inValues[1]));
            string from = ((string)(inValues[2]));
            string to = ((string)(inValues[3]));
            Slovo.ServiceReferences.TranslateOptions options = ((Slovo.ServiceReferences.TranslateOptions)(inValues[4]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginAddTranslationArray(appId, translations, from, to, options, callback, asyncState);
        }
        
        private object[] OnEndAddTranslationArray(System.IAsyncResult result) {
            ((Slovo.ServiceReferences.LanguageService)(this)).EndAddTranslationArray(result);
            return null;
        }
        
        private void OnAddTranslationArrayCompleted(object state) {
            if ((this.AddTranslationArrayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTranslationArrayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTranslationArrayAsync(string appId, Slovo.ServiceReferences.Translation[] translations, string from, string to, Slovo.ServiceReferences.TranslateOptions options) {
            this.AddTranslationArrayAsync(appId, translations, from, to, options, null);
        }
        
        public void AddTranslationArrayAsync(string appId, Slovo.ServiceReferences.Translation[] translations, string from, string to, Slovo.ServiceReferences.TranslateOptions options, object userState) {
            if ((this.onBeginAddTranslationArrayDelegate == null)) {
                this.onBeginAddTranslationArrayDelegate = new BeginOperationDelegate(this.OnBeginAddTranslationArray);
            }
            if ((this.onEndAddTranslationArrayDelegate == null)) {
                this.onEndAddTranslationArrayDelegate = new EndOperationDelegate(this.OnEndAddTranslationArray);
            }
            if ((this.onAddTranslationArrayCompletedDelegate == null)) {
                this.onAddTranslationArrayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTranslationArrayCompleted);
            }
            base.InvokeAsync(this.onBeginAddTranslationArrayDelegate, new object[] {
                        appId,
                        translations,
                        from,
                        to,
                        options}, this.onEndAddTranslationArrayDelegate, this.onAddTranslationArrayCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginGetTranslationsArray(string appId, string[] texts, string from, string to, int maxTranslations, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTranslationsArray(appId, texts, from, to, maxTranslations, options, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Slovo.ServiceReferences.GetTranslationsResponse[] Slovo.ServiceReferences.LanguageService.EndGetTranslationsArray(System.IAsyncResult result) {
            return base.Channel.EndGetTranslationsArray(result);
        }
        
        private System.IAsyncResult OnBeginGetTranslationsArray(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            string[] texts = ((string[])(inValues[1]));
            string from = ((string)(inValues[2]));
            string to = ((string)(inValues[3]));
            int maxTranslations = ((int)(inValues[4]));
            Slovo.ServiceReferences.TranslateOptions options = ((Slovo.ServiceReferences.TranslateOptions)(inValues[5]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginGetTranslationsArray(appId, texts, from, to, maxTranslations, options, callback, asyncState);
        }
        
        private object[] OnEndGetTranslationsArray(System.IAsyncResult result) {
            Slovo.ServiceReferences.GetTranslationsResponse[] retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndGetTranslationsArray(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTranslationsArrayCompleted(object state) {
            if ((this.GetTranslationsArrayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTranslationsArrayCompleted(this, new GetTranslationsArrayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTranslationsArrayAsync(string appId, string[] texts, string from, string to, int maxTranslations, Slovo.ServiceReferences.TranslateOptions options) {
            this.GetTranslationsArrayAsync(appId, texts, from, to, maxTranslations, options, null);
        }
        
        public void GetTranslationsArrayAsync(string appId, string[] texts, string from, string to, int maxTranslations, Slovo.ServiceReferences.TranslateOptions options, object userState) {
            if ((this.onBeginGetTranslationsArrayDelegate == null)) {
                this.onBeginGetTranslationsArrayDelegate = new BeginOperationDelegate(this.OnBeginGetTranslationsArray);
            }
            if ((this.onEndGetTranslationsArrayDelegate == null)) {
                this.onEndGetTranslationsArrayDelegate = new EndOperationDelegate(this.OnEndGetTranslationsArray);
            }
            if ((this.onGetTranslationsArrayCompletedDelegate == null)) {
                this.onGetTranslationsArrayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTranslationsArrayCompleted);
            }
            base.InvokeAsync(this.onBeginGetTranslationsArrayDelegate, new object[] {
                        appId,
                        texts,
                        from,
                        to,
                        maxTranslations,
                        options}, this.onEndGetTranslationsArrayDelegate, this.onGetTranslationsArrayCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginSpeak(string appId, string text, string language, string format, string options, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSpeak(appId, text, language, format, options, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Slovo.ServiceReferences.LanguageService.EndSpeak(System.IAsyncResult result) {
            return base.Channel.EndSpeak(result);
        }
        
        private System.IAsyncResult OnBeginSpeak(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            string text = ((string)(inValues[1]));
            string language = ((string)(inValues[2]));
            string format = ((string)(inValues[3]));
            string options = ((string)(inValues[4]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginSpeak(appId, text, language, format, options, callback, asyncState);
        }
        
        private object[] OnEndSpeak(System.IAsyncResult result) {
            string retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndSpeak(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSpeakCompleted(object state) {
            if ((this.SpeakCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SpeakCompleted(this, new SpeakCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SpeakAsync(string appId, string text, string language, string format, string options) {
            this.SpeakAsync(appId, text, language, format, options, null);
        }
        
        public void SpeakAsync(string appId, string text, string language, string format, string options, object userState) {
            if ((this.onBeginSpeakDelegate == null)) {
                this.onBeginSpeakDelegate = new BeginOperationDelegate(this.OnBeginSpeak);
            }
            if ((this.onEndSpeakDelegate == null)) {
                this.onEndSpeakDelegate = new EndOperationDelegate(this.OnEndSpeak);
            }
            if ((this.onSpeakCompletedDelegate == null)) {
                this.onSpeakCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSpeakCompleted);
            }
            base.InvokeAsync(this.onBeginSpeakDelegate, new object[] {
                        appId,
                        text,
                        language,
                        format,
                        options}, this.onEndSpeakDelegate, this.onSpeakCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Slovo.ServiceReferences.LanguageService.BeginTranslateArray(string appId, string[] texts, string from, string to, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTranslateArray(appId, texts, from, to, options, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Slovo.ServiceReferences.TranslateArrayResponse[] Slovo.ServiceReferences.LanguageService.EndTranslateArray(System.IAsyncResult result) {
            return base.Channel.EndTranslateArray(result);
        }
        
        private System.IAsyncResult OnBeginTranslateArray(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appId = ((string)(inValues[0]));
            string[] texts = ((string[])(inValues[1]));
            string from = ((string)(inValues[2]));
            string to = ((string)(inValues[3]));
            Slovo.ServiceReferences.TranslateOptions options = ((Slovo.ServiceReferences.TranslateOptions)(inValues[4]));
            return ((Slovo.ServiceReferences.LanguageService)(this)).BeginTranslateArray(appId, texts, from, to, options, callback, asyncState);
        }
        
        private object[] OnEndTranslateArray(System.IAsyncResult result) {
            Slovo.ServiceReferences.TranslateArrayResponse[] retVal = ((Slovo.ServiceReferences.LanguageService)(this)).EndTranslateArray(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTranslateArrayCompleted(object state) {
            if ((this.TranslateArrayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TranslateArrayCompleted(this, new TranslateArrayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TranslateArrayAsync(string appId, string[] texts, string from, string to, Slovo.ServiceReferences.TranslateOptions options) {
            this.TranslateArrayAsync(appId, texts, from, to, options, null);
        }
        
        public void TranslateArrayAsync(string appId, string[] texts, string from, string to, Slovo.ServiceReferences.TranslateOptions options, object userState) {
            if ((this.onBeginTranslateArrayDelegate == null)) {
                this.onBeginTranslateArrayDelegate = new BeginOperationDelegate(this.OnBeginTranslateArray);
            }
            if ((this.onEndTranslateArrayDelegate == null)) {
                this.onEndTranslateArrayDelegate = new EndOperationDelegate(this.OnEndTranslateArray);
            }
            if ((this.onTranslateArrayCompletedDelegate == null)) {
                this.onTranslateArrayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTranslateArrayCompleted);
            }
            base.InvokeAsync(this.onBeginTranslateArrayDelegate, new object[] {
                        appId,
                        texts,
                        from,
                        to,
                        options}, this.onEndTranslateArrayDelegate, this.onTranslateArrayCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Slovo.ServiceReferences.LanguageService CreateChannel() {
            return new LanguageServiceClientChannel(this);
        }
        
        private class LanguageServiceClientChannel : ChannelBase<Slovo.ServiceReferences.LanguageService>, Slovo.ServiceReferences.LanguageService {
            
            public LanguageServiceClientChannel(System.ServiceModel.ClientBase<Slovo.ServiceReferences.LanguageService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddTranslation(string appId, string originalText, string translatedText, string from, string to, int rating, string contentType, string category, string user, string uri, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[10];
                _args[0] = appId;
                _args[1] = originalText;
                _args[2] = translatedText;
                _args[3] = from;
                _args[4] = to;
                _args[5] = rating;
                _args[6] = contentType;
                _args[7] = category;
                _args[8] = user;
                _args[9] = uri;
                System.IAsyncResult _result = base.BeginInvoke("AddTranslation", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddTranslation(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddTranslation", _args, result);
            }
            
            public System.IAsyncResult BeginBreakSentences(string appId, string text, string language, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = appId;
                _args[1] = text;
                _args[2] = language;
                System.IAsyncResult _result = base.BeginInvoke("BreakSentences", _args, callback, asyncState);
                return _result;
            }
            
            public int[] EndBreakSentences(System.IAsyncResult result) {
                object[] _args = new object[0];
                int[] _result = ((int[])(base.EndInvoke("BreakSentences", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDetect(string appId, string text, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = appId;
                _args[1] = text;
                System.IAsyncResult _result = base.BeginInvoke("Detect", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDetect(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Detect", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDetectArray(string appId, string[] texts, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = appId;
                _args[1] = texts;
                System.IAsyncResult _result = base.BeginInvoke("DetectArray", _args, callback, asyncState);
                return _result;
            }
            
            public string[] EndDetectArray(System.IAsyncResult result) {
                object[] _args = new object[0];
                string[] _result = ((string[])(base.EndInvoke("DetectArray", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAppIdToken(string appId, int minRatingRead, int maxRatingWrite, int expireSeconds, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = appId;
                _args[1] = minRatingRead;
                _args[2] = maxRatingWrite;
                _args[3] = expireSeconds;
                System.IAsyncResult _result = base.BeginInvoke("GetAppIdToken", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetAppIdToken(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetAppIdToken", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLanguageNames(string appId, string locale, string[] languageCodes, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = appId;
                _args[1] = locale;
                _args[2] = languageCodes;
                System.IAsyncResult _result = base.BeginInvoke("GetLanguageNames", _args, callback, asyncState);
                return _result;
            }
            
            public string[] EndGetLanguageNames(System.IAsyncResult result) {
                object[] _args = new object[0];
                string[] _result = ((string[])(base.EndInvoke("GetLanguageNames", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLanguagesForSpeak(string appId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = appId;
                System.IAsyncResult _result = base.BeginInvoke("GetLanguagesForSpeak", _args, callback, asyncState);
                return _result;
            }
            
            public string[] EndGetLanguagesForSpeak(System.IAsyncResult result) {
                object[] _args = new object[0];
                string[] _result = ((string[])(base.EndInvoke("GetLanguagesForSpeak", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLanguagesForTranslate(string appId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = appId;
                System.IAsyncResult _result = base.BeginInvoke("GetLanguagesForTranslate", _args, callback, asyncState);
                return _result;
            }
            
            public string[] EndGetLanguagesForTranslate(System.IAsyncResult result) {
                object[] _args = new object[0];
                string[] _result = ((string[])(base.EndInvoke("GetLanguagesForTranslate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTranslations(string appId, string text, string from, string to, int maxTranslations, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = appId;
                _args[1] = text;
                _args[2] = from;
                _args[3] = to;
                _args[4] = maxTranslations;
                _args[5] = options;
                System.IAsyncResult _result = base.BeginInvoke("GetTranslations", _args, callback, asyncState);
                return _result;
            }
            
            public Slovo.ServiceReferences.GetTranslationsResponse EndGetTranslations(System.IAsyncResult result) {
                object[] _args = new object[0];
                Slovo.ServiceReferences.GetTranslationsResponse _result = ((Slovo.ServiceReferences.GetTranslationsResponse)(base.EndInvoke("GetTranslations", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTranslate(string appId, string text, string from, string to, string contentType, string category, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = appId;
                _args[1] = text;
                _args[2] = from;
                _args[3] = to;
                _args[4] = contentType;
                _args[5] = category;
                System.IAsyncResult _result = base.BeginInvoke("Translate", _args, callback, asyncState);
                return _result;
            }
            
            public string EndTranslate(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Translate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddTranslationArray(string appId, Slovo.ServiceReferences.Translation[] translations, string from, string to, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = appId;
                _args[1] = translations;
                _args[2] = from;
                _args[3] = to;
                _args[4] = options;
                System.IAsyncResult _result = base.BeginInvoke("AddTranslationArray", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddTranslationArray(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddTranslationArray", _args, result);
            }
            
            public System.IAsyncResult BeginGetTranslationsArray(string appId, string[] texts, string from, string to, int maxTranslations, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = appId;
                _args[1] = texts;
                _args[2] = from;
                _args[3] = to;
                _args[4] = maxTranslations;
                _args[5] = options;
                System.IAsyncResult _result = base.BeginInvoke("GetTranslationsArray", _args, callback, asyncState);
                return _result;
            }
            
            public Slovo.ServiceReferences.GetTranslationsResponse[] EndGetTranslationsArray(System.IAsyncResult result) {
                object[] _args = new object[0];
                Slovo.ServiceReferences.GetTranslationsResponse[] _result = ((Slovo.ServiceReferences.GetTranslationsResponse[])(base.EndInvoke("GetTranslationsArray", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSpeak(string appId, string text, string language, string format, string options, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = appId;
                _args[1] = text;
                _args[2] = language;
                _args[3] = format;
                _args[4] = options;
                System.IAsyncResult _result = base.BeginInvoke("Speak", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSpeak(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Speak", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTranslateArray(string appId, string[] texts, string from, string to, Slovo.ServiceReferences.TranslateOptions options, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = appId;
                _args[1] = texts;
                _args[2] = from;
                _args[3] = to;
                _args[4] = options;
                System.IAsyncResult _result = base.BeginInvoke("TranslateArray", _args, callback, asyncState);
                return _result;
            }
            
            public Slovo.ServiceReferences.TranslateArrayResponse[] EndTranslateArray(System.IAsyncResult result) {
                object[] _args = new object[0];
                Slovo.ServiceReferences.TranslateArrayResponse[] _result = ((Slovo.ServiceReferences.TranslateArrayResponse[])(base.EndInvoke("TranslateArray", _args, result)));
                return _result;
            }
        }
    }
}
